name: Deploy to EC2

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: kseb-t2g-server

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Configure AWS credentials
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Stop and remove existing container
          docker stop kseb-t2g-server || true
          docker rm kseb-t2g-server || true
          
          # Pull and run new container
          docker pull ${{ steps.build-image.outputs.image }}
          docker run -d -p 1958:1958 --gpus all --name kseb-t2g-server \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --restart unless-stopped \
            --health-cmd="curl -f http://localhost:1958/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            --health-start-period=300s \
            ${{ steps.build-image.outputs.image }}
          
          # Wait for container to be healthy
          echo "Waiting for container to be healthy..."
          for i in {1..20}; do
            if [ "$(docker inspect --format='{{.State.Health.Status}}' kseb-t2g-server)" = "healthy" ]; then
              echo "Container is healthy!"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "Container health check failed after 10 minutes"
              docker logs kseb-t2g-server --tail 50
              exit 1
            fi
            echo "Waiting... ($i/20)"
            sleep 30
          done
          
          # Verify application is responding
          if curl -f http://localhost:1958/; then
            echo "Application is responding successfully"
          else
            echo "Application is not responding"
            docker logs kseb-t2g-server --tail 50
            exit 1
          fi
          
          # Clean up old images
          docker image prune -f